name: Rust CI Pipeline

on:
  push:
    paths:
      - "webserver/**"
      - ".github/workflows/rust.yml"
    branches: ["main", "cicd"]
  pull_request:
    branches: ["main"]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Run Clippy (Lint)
        run: cd webserver && cargo clippy -- -D warnings

      - name: Check Formatting
        run: cd webserver && cargo fmt -- --check

  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/index
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-index-

      - name: Cache Cargo git
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Run Docker Compose
        run: cd webserver && docker compose up -d

      - name: Build Project
        run: cd webserver && cargo build --verbose

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Cache Cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-

      - name: Run Docker Compose
        run: cd webserver && docker compose up -d

#      - name: Wait for Database
#        run: until docker exec webserver pg_isready --dbname=postgres --username=myuser; do sleep 1; done

      - name: Run Tests
        env:
          DATABASE_URL: "postgres://myuser:mypassword@localhost:5432/postgres"
        run: cd webserver && cargo test --verbose
